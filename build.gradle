/**************************************************
* Buildscript
**************************************************/
buildscript {
  ext {
    springBootVersion = "1.3.0.RELEASE"
  }
  
  repositories {
    mavenCentral()
  }
  
  dependencies {
    classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
  }
}

/**************************************************
* Plugins 
**************************************************/
plugins {
    id 'org.unbroken-dome.test-sets' version '1.1.0'
}

apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "spring-boot"
apply plugin: "checkstyle"
apply plugin: "findbugs"
apply plugin: "pmd"
apply plugin: "jacoco"

/**************************************************
* JAR 
**************************************************/
jar {
  baseName = "spring-boot-starter"
  version = "0.0.1-SNAPSHOT"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

/**************************************************
* Repositories 
**************************************************/
repositories {
  mavenCentral()
  maven { url "https://repo.spring.io/snapshot" }
  maven { url "https://repo.spring.io/milestone" }
}

/**************************************************
* Integration Tests
**************************************************/
testSets {
   integrationTest { dirName = 'integration-test' }
}

project.integrationTest {
  outputs.upToDateWhen { false }
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

/**************************************************
* Eclipse 
**************************************************/
eclipse {    
  classpath {
    containers.remove "org.eclipse.jdt.launching.JRE_CONTAINER"
    containers "org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8"
  }
}

/**************************************************
* Checkstyle 
**************************************************/
checkstyle {
  toolVersion = "6.13"
  ignoreFailures = false
}

// Configure main HTML report
checkstyleMain << {
  ant.xslt(in: reports.xml.destination,
    style: new File("config/checkstyle/checkstyle-noframes-sorted.xsl"),
    out: new File(reports.xml.destination.parent, "main.html"))
}

// Configure test HTML report
checkstyleTest << {
  ant.xslt(in: reports.xml.destination,
    style: new File("config/checkstyle/checkstyle-noframes-sorted.xsl"),
    out: new File(reports.xml.destination.parent, "test.html"))
}

// Fail build on warnings
tasks.withType(Checkstyle).each { checkstyleTask ->
  checkstyleTask.doLast {
    reports.all { report ->
      def outputFile = report.destination
      if (outputFile.exists() && outputFile.text.contains("<error ")) {
        throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
      }
    }
  }
}

/**************************************************
* Findbugs 
**************************************************/
findbugs {
  ignoreFailures = false
}  

tasks.withType(FindBugs) {
  reports {
    xml.enabled = false
    html.enabled = true
  }
}

/**************************************************
* PMD 
**************************************************/
pmd {
  ignoreFailures = false
}

tasks.withType(Pmd) {
  reports {
    xml.enabled = false
    html.enabled = true
  }
}

/**************************************************
* Jacoco 
**************************************************/
jacocoTestReport {
  reports {
    xml.enabled = false
    csv.enabled = false
    html.destination = "${buildDir}/reports/jacoco"
  }
}

/**************************************************
* Dependencies 
**************************************************/
dependencies {
  compile "org.springframework.boot:spring-boot-starter-actuator"
  compile "org.springframework.boot:spring-boot-starter-aop"
  compile("org.springframework.boot:spring-boot-starter-data-mongodb")
  compile("org.springframework.boot:spring-boot-starter-data-rest")
  compile "org.springframework.boot:spring-boot-starter-web"
  compile "org.projectlombok:lombok"
  
  integrationTestCompile "com.jayway.restassured:rest-assured:2.7.0"
  
  testCompile "com.google.guava:guava:19.0"
  testCompile "nl.jqno.equalsverifier:equalsverifier:1.7.5"
  testCompile "org.javassist:javassist:3.20.0-GA"
  testCompile "org.meanbean:meanbean:2.0.3"
  testCompile "org.springframework.boot:spring-boot-starter-test"
}

dependencyManagement {
  imports { 
    mavenBom "org.springframework.cloud:spring-cloud-starter-parent:Brixton.M3" 
  }
}

/**************************************************
* Build Order 
**************************************************/
// Run integration tests after unit tests
integrationTest.mustRunAfter test

// Run checks after tests
check.mustRunAfter test
check.mustRunAfter integrationTest

// Generate the Jacoco report after unit tests are run
test.finalizedBy jacocoTestReport
integrationTest.mustRunAfter jacocoTestReport

/**************************************************
* Wrapper 
**************************************************/
task wrapper(type: Wrapper) {
  gradleVersion = "2.7"
}
