/**************************************************
* Buildscript Configuration
**************************************************/
buildscript {
  ext {
    springBootVersion = "1.3.0.RELEASE"
  }
  
  repositories {
    mavenCentral()
  }
  
  dependencies {
    classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
  }
}

/**************************************************
* Plugins 
**************************************************/
apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "spring-boot"
apply plugin: "checkstyle"
apply plugin: "findbugs"
apply plugin: "pmd"
apply plugin: "jacoco"

/**************************************************
* JAR Configuration 
**************************************************/
jar {
  baseName = "spring-boot-starter"
  version = "0.0.1-SNAPSHOT"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

/**************************************************
* Dependency Configuration 
**************************************************/
repositories {
  mavenCentral()
  maven { url "https://repo.spring.io/snapshot" }
  maven { url "https://repo.spring.io/milestone" }
}

dependencies {
  compile "org.springframework.boot:spring-boot-starter-actuator"
  compile "org.springframework.boot:spring-boot-starter-aop"
  compile("org.springframework.boot:spring-boot-starter-data-mongodb")
  compile("org.springframework.boot:spring-boot-starter-data-rest")
  compile "org.springframework.boot:spring-boot-starter-web"
  compile "org.projectlombok:lombok"
  
  testCompile "com.google.guava:guava:19.0"
  testCompile "com.jayway.restassured:rest-assured:2.7.0"
  testCompile "nl.jqno.equalsverifier:equalsverifier:1.7.5"
  testCompile "org.javassist:javassist:3.20.0-GA"
  testCompile "org.meanbean:meanbean:2.0.3"
  testCompile "org.springframework.boot:spring-boot-starter-test"
  testCompile "org.unitils:unitils:2.2"
}

dependencyManagement {
  imports { 
    mavenBom "org.springframework.cloud:spring-cloud-starter-parent:Brixton.M3" 
  }
}

/**************************************************
* Build Order Configuration 
**************************************************/
// Always run clean before starting the build
compileJava.dependsOn clean

// Run checks after tests
check.dependsOn test
checkstyleMain.mustRunAfter(test)

// Generate the Jacoco report after tests are run
test.finalizedBy jacocoTestReport

/**************************************************
* Eclipse Configuration 
**************************************************/
eclipse {    
  classpath {
    containers.remove "org.eclipse.jdt.launching.JRE_CONTAINER"
    containers "org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8"
  }
}

/**************************************************
* Checkstyle Configuration 
**************************************************/
checkstyle {
  toolVersion = "6.13"
  ignoreFailures = false
}

// Configure main HTML report
checkstyleMain << {
  ant.xslt(in: reports.xml.destination,
    style: new File("config/checkstyle/checkstyle-noframes-sorted.xsl"),
    out: new File(reports.xml.destination.parent, "main.html"))
}

// Configure test HTML report
checkstyleTest << {
  ant.xslt(in: reports.xml.destination,
    style: new File("config/checkstyle/checkstyle-noframes-sorted.xsl"),
    out: new File(reports.xml.destination.parent, "test.html"))
}

// Fail build on warnings
tasks.withType(Checkstyle).each { checkstyleTask ->
  checkstyleTask.doLast {
    reports.all { report ->
      def outputFile = report.destination
      if (outputFile.exists() && outputFile.text.contains("<error ")) {
        throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
      }
    }
  }
}

/**************************************************
* Findbugs Configuration 
**************************************************/
findbugs {
  ignoreFailures = false
}  

tasks.withType(FindBugs) {
  reports {
    xml.enabled = false
    html.enabled = true
  }
}

/**************************************************
* PMD Configuration 
**************************************************/
pmd {
  ignoreFailures = false
}

tasks.withType(Pmd) {
  reports {
    xml.enabled = false
    html.enabled = true
  }
}

/**************************************************
* Jacoco Configuration 
**************************************************/
jacocoTestReport {
  reports {
    xml.enabled = false
    csv.enabled = false
    html.destination = "${buildDir}/reports/jacoco"
  }
}

/**************************************************
* Wrapper Configuration 
**************************************************/
task wrapper(type: Wrapper) {
  gradleVersion = "2.7"
}
